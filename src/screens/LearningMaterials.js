import React, { useState } from 'react';
import { View, Text, ScrollView, StyleSheet, TouchableOpacity, FlatList, Platform } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { CommonActions } from '@react-navigation/native';

export default function JavaScript() {
  const navigation = useNavigation();
  const [activeTutorial, setActiveTutorial] = useState('JavaScript'); // Menaxhon tutorialin aktiv

  const handleGoBack = () => {
    navigation.dispatch(
      CommonActions.reset({
        index: 0,
        routes: [{ name: 'Home' }], 
      })
    );
  };

  // Funksioni pÃ«r tÃ« ndihmuar nÃ« zgjedhjen e tutorialeve
  const renderTutorials = (tutorials) => {
    return tutorials.map((tutorial, index) => (
      <View key={index} style={styles.card}>
        <Text style={styles.sectionTitle}>{tutorial.title}</Text>
        <Text style={styles.tutorialText}>{tutorial.content}</Text>
      </View>
    ));
  };

  const menuItems = [
    { name: 'JavaScript', tutorials: tutorialsJavaScript },
    { name: 'HTML', tutorials: tutorialsHTML },
    { name: 'CSS', tutorials: tutorialsCSS },
    { name: 'React Native', tutorials: tutorialsReactNative },
  ];

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <TouchableOpacity style={styles.backButton} onPress={handleGoBack}>
        <Text style={styles.backButtonText}>â€¹ Kthehu</Text>
      </TouchableOpacity>

      {/* NÃ«nmenyja horizontale */}
      <FlatList
        horizontal
        data={menuItems}
        renderItem={({ item }) => (
          <TouchableOpacity
            style={[styles.menuItem, activeTutorial === item.name && styles.activeMenuItem]}
            onPress={() => setActiveTutorial(item.name)}
          >
            <Text style={styles.menuText}>{item.name}</Text>
          </TouchableOpacity>
        )}
        keyExtractor={(item) => item.name}
        showsHorizontalScrollIndicator={false}
        contentContainerStyle={styles.menuContainer}
      />

      {/* PÃ«rshtat tutorialin qÃ« shfaqet pÃ«rkatÃ«sisht */}
      <Text style={styles.title}>ğŸ“œ {activeTutorial} Basics</Text>
      <Text style={styles.description}>
        {activeTutorial === 'JavaScript' && 'JavaScript Ã«shtÃ« njÃ« gjuhÃ« pÃ«r zhvillim aplikacionesh web dhe mobile.'}
        {activeTutorial === 'HTML' && 'HTML Ã«shtÃ« gjuha pÃ«r strukturuar faqe web.'}
        {activeTutorial === 'CSS' && 'CSS pÃ«rdoret pÃ«r stilizimin e faqeve web.'}
        {activeTutorial === 'React Native' && 'React Native pÃ«rdoret pÃ«r zhvillimin e aplikacioneve mobile.'}
      </Text>

      {/* Shfaq tutorialet pÃ«rkatÃ«se */}
      {renderTutorials(menuItems.find((item) => item.name === activeTutorial).tutorials)}
    </ScrollView>
  );
}

// Lista e tutorialeve pÃ«r JavaScript
const tutorialsJavaScript = [
  {
    title: 'ğŸ“˜ Variablat',
    content: `Variablat pÃ«rdoren pÃ«r tÃ« ruajtur tÃ« dhÃ«na qÃ« mund tÃ« pÃ«rdoren mÃ« vonÃ« nÃ« program. JavaScript ka tri mÃ«nyra pÃ«r tÃ« shpallur variabla:
    - \`var\`: Ã‹shtÃ« i vjetÃ«r dhe nuk Ã«shtÃ« shumÃ« i rekomanduar pÃ«r pÃ«rdorim nÃ« JavaScript tÃ« fundit.
    - \`let\`: MÃ« e preferuar se \`var\`, ka njÃ« fushÃ« tÃ« dukshme tÃ« bllokut dhe mund tÃ« ndryshohet.
    - \`const\`: Nuk mund tÃ« ndryshohet pas krijimit.
    
    Shembuj:
    \`\`\`javascript
    var x = 5; // i mund tÃ« ndryshohet
    let y = 10; // gjithashtu mund tÃ« ndryshohet
    const z = 20; // nuk mund tÃ« ndryshohet
    \`\`\`
    `,
  },
  {
    title: 'ğŸ“˜ Funksionet',
    content: `Funksionet janÃ« grupe kodesh qÃ« mund tÃ« thirren pÃ«r tÃ« realizuar njÃ« detyrÃ« tÃ« caktuar dhe mund tÃ« kenÃ« parametrat dhe kthimin e vlerÃ«s.
    - Funksionet mund tÃ« kenÃ« parametra qÃ« i kalohen kur thirren, si dhe mund tÃ« kthejnÃ« njÃ« vlerÃ« si rezultat tÃ« ekzekutimit tÃ« tyre.
    
    Shembuj:
    \`\`\`javascript
    // Funksion i thjeshtÃ« qÃ« kthen vlerÃ«n
    function add(a, b) {
      return a + b;
    }
    
    console.log(add(5, 3)); // Output: 8

    // Funksion arrow (shkurtesÃ«)
    const multiply = (a, b) => a * b;
    console.log(multiply(5, 3)); // Output: 15
    \`\`\`
    `,
  },
  {
    title: 'ğŸ“˜ Kushtet',
    content: `Kushtet janÃ« njÃ« mÃ«nyrÃ« pÃ«r tÃ« vendosur logjikÃ«n e programit, duke pÃ«rdorur "if", "else if", dhe "else".
    - Kushtet mund tÃ« pÃ«rdorin operatorÃ« logjikÃ« si \`&&\` (dhe), \`||\` (ose), dhe \`!\` (moho).
    - Mund tÃ« pÃ«rdoren edhe pÃ«r tâ€™u krijuar struktura mÃ« komplekse si "switch".

    Shembuj:
    \`\`\`javascript
    let age = 20;

    if (age >= 18 && age < 21) {
      console.log("Ju jeni njÃ« tÃ« rritur, por jo ende mund tÃ« pini alkool.");
    } else if (age >= 21) {
      console.log("Ju mund tÃ« pini alkool.");
    } else {
      console.log("Ju jeni nÃ«n moshÃ«n e pijes.");
    }

    // Shembull i njÃ« "switch"
    let day = "Saturday";
    switch (day) {
      case "Monday":
        console.log("Filloni punÃ«n!");
        break;
      case "Saturday":
        console.log("Keni pushim!");
        break;
      default:
        console.log("NjÃ« ditÃ« tjetÃ«r.");
    }
    \`\`\`
    `,
  },
];

// Lista e tutorialeve pÃ«r HTML
const tutorialsHTML = [
  {
    title: 'ğŸ“˜ Strukturimi i faqeve me HTML',
    content: `HTML pÃ«rdoret pÃ«r tÃ« strukturuar pÃ«rmbajtjen e faqes. ElementÃ«t kryesorÃ« janÃ«: <html>, <head>, <body>, <h1>, <p> dhe tÃ« tjerÃ«. KÃ«ta elementÃ« janÃ« baza pÃ«r ndÃ«rtimin e faqeve web.
    
    Shembuj:
    \`\`\`html
    <html>
      <head>
        <title>Faqja ime</title>
      </head>
      <body>
        <h1>PÃ«rshÃ«ndetje!</h1>
        <p>Kjo Ã«shtÃ« njÃ« faqe e thjeshtÃ« HTML.</p>
      </body>
    </html>
    \`\`\`
    `,
  },
  {
    title: 'ğŸ“˜ Titujt (Headings)',
    content: `Titujt janÃ« pÃ«rdorur pÃ«r tÃ« dhÃ«nÃ« struktura dhe pÃ«r tÃ« ndihmuar pÃ«rdoruesit tÃ« kuptojnÃ« mÃ« mirÃ« pÃ«rmbajtjen e faqes. HTML ofron 6 nivele tÃ« titujve: <h1> deri te <h6> ku \`<h1>\` Ã«shtÃ« mÃ« i rÃ«ndÃ«sishÃ«m dhe \`<h6>\` mÃ« pak i rÃ«ndÃ«sishÃ«m.
    
    Shembuj:
    \`\`\`html
    <h1>Titulli Kryesor</h1>
    <h2>Sub-titulli</h2>
    <h3>NjÃ« tjetÃ«r sub-titull</h3>
    \`\`\`
    `,
  },
  {
    title: 'ğŸ“˜ Paragrafi (Paragraph)',
    content: `Elementi \`<p>\` pÃ«rdoret pÃ«r tÃ« krijuar paragrafÃ« dhe Ã«shtÃ« njÃ« nga elementÃ«t mÃ« tÃ« thjeshtÃ« nÃ« HTML. Ai ndihmon nÃ« ndarjen e pÃ«rmbajtjes nÃ« pjesÃ« tÃ« lexueshme.
    
    Shembuj:
    \`\`\`html
    <p>Kjo Ã«shtÃ« njÃ« paragraf qÃ« pÃ«rmban informacionin kryesor.</p>
    \`\`\`
    `,
  },
  {
    title: 'ğŸ“˜ Lidhje (Anchor Tag)',
    content: `Elementi \`<a>\` pÃ«rdoret pÃ«r tÃ« krijuar lidhje (hyperlinks) qÃ« mund tÃ« Ã§ojnÃ« nÃ« faqe tÃ« tjera web. Mund tÃ« pÃ«rdorim atributin \`href\` pÃ«r tÃ« specifikuar URL-nÃ« e lidhjes.
    
    Shembuj:
    \`\`\`html
    <a href="https://www.example.com">Kliko kÃ«tu pÃ«r tÃ« vizituar faqe</a>
    \`\`\`
    `,
  },
  {
    title: 'ğŸ“˜ Imazhi (Image Tag)',
    content: `Elementi \`<img>\` pÃ«rdoret pÃ«r tÃ« shtuar imazhe nÃ« njÃ« faqe HTML. Ky element ka dy atribute kryesore: \`src\` pÃ«r burimin e imazhit dhe \`alt\` pÃ«r pÃ«rshkrimin alternativ.
    
    Shembuj:
    \`\`\`html
    <img src="logo.png" alt="Logo i faqes" width="300" />
    \`\`\`
    `,
  },
  {
    title: 'ğŸ“˜ Lista e pa renditur (Unordered List)',
    content: `Elementi \`<ul>\` krijon njÃ« listÃ« tÃ« pa renditur, ndÃ«rsa \`<li>\` pÃ«rdoret pÃ«r secilÃ«n pikÃ« tÃ« listÃ«s.
    
    Shembuj:
    \`\`\`html
    <ul>
      <li>Apple</li>
      <li>Banana</li>
      <li>Orange</li>
    </ul>
    \`\`\`
    `,
  },
  {
    title: 'ğŸ“˜ Lista e renditur (Ordered List)',
    content: `Elementi \`<ol>\` krijon njÃ« listÃ« tÃ« renditur, e cila Ã«shtÃ« e numÃ«ruar, dhe \`<li>\` pÃ«rdoret pÃ«r secilÃ«n pikÃ« tÃ« listÃ«s.
    
    Shembuj:
    \`\`\`html
    <ol>
      <li>First</li>
      <li>Second</li>
      <li>Third</li>
    </ol>
    \`\`\`
    `,
  },
  {
    title: 'ğŸ“˜ Formulari (Form)',
    content: `FormularÃ«t pÃ«rdoren pÃ«r tÃ« marrÃ« informacion nga pÃ«rdoruesit. ElementÃ«t kryesorÃ« tÃ« formularÃ«ve janÃ« \`<form>\`, \`<input>\`, \`<label>\`, dhe \`<button>\`.
    
    Shembuj:
    \`\`\`html
    <form action="/submit" method="POST">
      <label for="name">Emri:</label>
      <input type="text" id="name" name="name" />
      <label for="email">Email:</label>
      <input type="email" id="email" name="email" />
      <button type="submit">DÃ«rgo</button>
    </form>
    \`\`\`
    `,
  },
  {
    title: 'ğŸ“˜ Tabela (Table)',
    content: `Elementi \`<table>\` krijon njÃ« tabelÃ«, \`<tr>\` Ã«shtÃ« pÃ«r njÃ« rresht, \`<td>\` pÃ«r njÃ« qelizÃ« tÃ« tabelÃ«s, dhe \`<th>\` pÃ«r njÃ« titull tÃ« tabelÃ«s.
    
    Shembuj:
    \`\`\`html
    <table>
      <tr>
        <th>Emri</th>
        <th>Email</th>
      </tr>
      <tr>
        <td>Alice</td>
        <td>alice@example.com</td>
      </tr>
      <tr>
        <td>Bob</td>
        <td>bob@example.com</td>
      </tr>
    </table>
    \`\`\`
    `,
  },
];

// Lista e tutorialeve pÃ«r CSS
const tutorialsCSS = [
  {
    title: 'ğŸ“˜ Styling me CSS',
    content: `CSS pÃ«rdoret pÃ«r tÃ« stiluar dhe pÃ«rshtatur pamjen e elementeve HTML nÃ« njÃ« faqe. PÃ«rdorni selektorÃ«t pÃ«r tÃ« zgjedhur elementÃ«t dhe pÃ«r tÃ« ndryshuar pamjen e tyre.
    
    Shembuj tÃ« thjeshtÃ« tÃ« CSS:
    \`\`\`css
    h1 {
      color: blue; /* Ndryshon ngjyrÃ«n e titujve */
      font-size: 30px; /* Ndryshon madhÃ«sinÃ« e fontit */
    }
    p {
      color: #333; /* NgjyrÃ« gri e errÃ«t pÃ«r tekstin */
      font-family: Arial, sans-serif; /* Vendos fontin */
      line-height: 1.5; /* Vendos hapÃ«sirÃ«n ndÃ«rmjet rreshtave */
    }
    \`\`\`
    `,
  },
  {
    title: 'ğŸ“˜ SelektorÃ«t CSS',
    content: `SelektorÃ«t janÃ« mÃ«nyra pÃ«r tÃ« zgjedhur elementÃ«t HTML qÃ« dÃ«shironi tÃ« stiloni. Ka disa lloje selektorÃ«sh nÃ« CSS:
    
    - **Selektori i Tipit**: Selektori i elementÃ«ve HTML si \`h1\`, \`p\`, etj.
    - **Selektori i KlasÃ«s**: Selektori i elementÃ«ve me klasÃ« tÃ« caktuar, p.sh., \`.myClass\`.
    - **Selektori i ID-sÃ«**: Selektori i elementeve me njÃ« ID tÃ« caktuar, p.sh., \`#header\`.
    - **Selektori Universal**: \`*\` selekton Ã§do element nÃ« njÃ« faqe.
    
    Shembuj:
    \`\`\`css
    /* Selektor i Tipit */
    h1 {
      font-size: 32px;
    }

    /* Selektor i KlasÃ«s */
    .myClass {
      color: red;
    }

    /* Selektor i ID-sÃ« */
    #header {
      background-color: yellow;
    }
    \`\`\`
    `,
  },
  {
    title: 'ğŸ“˜ PÃ«rdorimi i Ngjyrave nÃ« CSS',
    content: `CSS ofron mundÃ«si tÃ« shumta pÃ«r tÃ« ndryshuar ngjyrat e elementeve. Mund tÃ« pÃ«rdorÃ«sh ngjyra me emra tÃ« thjeshtÃ« si \`red\` ose \`blue\`, kodet HEX, RGB ose HSL.
    
    Shembuj:
    \`\`\`css
    p {
      color: red; /* PÃ«rdorimi i ngjyrÃ«s me emÃ«r */
    }

    h1 {
      color: #3498db; /* PÃ«rdorimi i ngjyrÃ«s HEX */
    }

    .background {
      background-color: rgb(255, 99, 71); /* PÃ«rdorimi i RGB */
    }
    \`\`\`
    `,
  },
  {
    title: 'ğŸ“˜ Fontet dhe MadhÃ«sia e Tekstit',
    content: `CSS mundÃ«son ndryshimin e madhÃ«sisÃ«, stilit dhe familjes sÃ« fontit pÃ«r tekstin nÃ« faqe. Mund tÃ« pÃ«rdorni fontet nga njÃ« font-familje tÃ« para-definuar ose mund tÃ« importoni fontet nga burime tÃ« jashtme si Google Fonts.
    
    Shembuj:
    \`\`\`css
    body {
      font-family: 'Arial', sans-serif;
      font-size: 16px;
    }

    h1 {
      font-size: 32px;
      font-weight: bold;
    }
    \`\`\`
    `,
  },
  {
    title: 'ğŸ“˜ PÃ«rdorimi i Marginave dhe Padding-ut',
    content: `NÃ« CSS, marginat dhe padding-u pÃ«rdoren pÃ«r tÃ« krijuar hapÃ«sira rreth dhe brenda elementeve.
    
    - **Margin**: HapÃ«sira jashtÃ« njÃ« elementi.
    - **Padding**: HapÃ«sira brenda njÃ« elementi, pÃ«rpara pÃ«rmbajtjes.
    
    Shembuj:
    \`\`\`css
    .container {
      margin: 20px; /* HapÃ«sira jashtÃ« elementit */
      padding: 15px; /* HapÃ«sira brenda elementit */
    }
    \`\`\`
    `,
  },
  {
    title: 'ğŸ“˜ Flexbox pÃ«r Layouts',
    content: `Flexbox Ã«shtÃ« njÃ« sistem i ri dhe mÃ« i fuqishÃ«m pÃ«r krijimin e layout-eve nÃ« CSS. Ai mundÃ«son qÃ« elementet tÃ« shtrihen dhe tÃ« pozicionohen lehtÃ«sisht brenda njÃ« konteneri.
    
    Shembuj:
    \`\`\`css
    .container {
      display: flex; /* Aktivizon Flexbox */
      justify-content: space-between; /* Vendos hapÃ«sirÃ«n mes elementeve */
      align-items: center; /* Vendos elementet nÃ« qendÃ«r vertikalisht */
    }
    .item {
      flex: 1; /* Ã‡do element do tÃ« shtrihet dhe tÃ« mbushÃ« hapÃ«sirÃ«n */
    }
    \`\`\`
    `,
  },
  {
    title: 'ğŸ“˜ Grid System pÃ«r Layouts',
    content: `CSS Grid Ã«shtÃ« njÃ« tjetÃ«r metodÃ« pÃ«r ndÃ«rtimin e layout-eve kompleks. Ai ndihmon pÃ«r tÃ« krijuar rreshta dhe kolona pÃ«r njÃ« faqe.
    
    Shembuj:
    \`\`\`css
    .container {
      display: grid; /* Aktivizon CSS Grid */
      grid-template-columns: repeat(3, 1fr); /* Krijon 3 kolona */
    }
    .item {
      grid-column: span 2; /* Ky element do tÃ« mbulojÃ« dy kolona */
    }
    \`\`\`
    `,
  },
];

// Lista e tutorialeve pÃ«r React Native
const tutorialsReactNative = [
  {
    title: 'ğŸ“˜ KomponentÃ«t nÃ« React Native',
    content: `KomponentÃ«t janÃ« blloqe tÃ« vogla tÃ« UI qÃ« mund tÃ« pÃ«rdoren pÃ«r tÃ« ndÃ«rtuar aplikacione mobile. KomponentÃ«t mund tÃ« jenÃ« tÃ« thjeshtÃ« si njÃ« tekst ose njÃ« pamje (image), ose mund tÃ« jenÃ« mÃ« tÃ« komplikuar, si pÃ«rbÃ«rÃ«s qÃ« pÃ«rmbajnÃ« mÃ« shumÃ« interaktivitet.

    Shembuj:
    \`\`\`javascript
    import React from 'react';
    import { View, Text } from 'react-native';

    function App() {
      return (
        <View>
          <Text>MirÃ«sevini nÃ« aplikacionin tonÃ«!</Text>
        </View>
      );
    }

    export default App;
    \`\`\`
    
    Ky Ã«shtÃ« njÃ« shembull i thjeshtÃ« ku \`View\` dhe \`Text\` janÃ« dy komponentÃ« tÃ« pÃ«rdorur pÃ«r tÃ« krijuar njÃ« pamje dhe pÃ«r tÃ« shfaqur tekstin nÃ« ekran.
    `,
  },
  {
    title: 'ğŸ“˜ Stili dhe Layout nÃ« React Native',
    content: `NÃ« React Native, stilimi i komponentÃ«ve mund tÃ« bÃ«het me JavaScript dhe CSS-like syntax. Kjo bÃ«het pÃ«rmes funksionit \`StyleSheet\` qÃ« mundÃ«son stilizimin e elementeve.

    Shembuj:
    \`\`\`javascript
    import React from 'react';
    import { View, Text, StyleSheet } from 'react-native';

    function App() {
      return (
        <View style={styles.container}>
          <Text style={styles.text}>MirÃ«sevini nÃ« aplikacionin tonÃ«!</Text>
        </View>
      );
    }

    const styles = StyleSheet.create({
      container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#f0f0f0',
      },
      text: {
        fontSize: 20,
        color: '#333',
      },
    });

    export default App;
    \`\`\`

    Ky shembull tregon se si mund tÃ« pÃ«rdorim \`StyleSheet\` pÃ«r tÃ« aplikuar stilizime si ngjyra, madhÃ«sia e fontit, dhe vendosja e elementeve nÃ« qendÃ«r tÃ« ekranit.
    `,
  },
  {
    title: 'ğŸ“˜ Menaxhimi i Gjendjes me useState',
    content: `NjÃ« nga konceptet kryesore nÃ« React Native Ã«shtÃ« pÃ«rdorimi i gjendjes (state) pÃ«r tÃ« menaxhuar ndryshimet dinamike nÃ« UI. Funksioni \`useState\` lejon krijimin e gjendjes dhe pÃ«rditÃ«simin e saj.

    Shembuj:
    \`\`\`javascript
    import React, { useState } from 'react';
    import { View, Text, TouchableOpacity } from 'react-native';

    function App() {
      const [count, setCount] = useState(0);

      const increment = () => setCount(count + 1);

      return (
        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
          <Text style={{ fontSize: 30 }}>Numri: {count}</Text>
          <TouchableOpacity onPress={increment}>
            <Text style={{ fontSize: 20, color: 'blue' }}>Rrit Numrin</Text>
          </TouchableOpacity>
        </View>
      );
    }

    export default App;
    \`\`\`

    Ky shembull pÃ«rdor \`useState\` pÃ«r tÃ« mbajtur njÃ« numÃ«r dhe pÃ«r ta rritur atÃ« kur pÃ«rdoruesi klikon njÃ« buton.
    `,
  },
  {
    title: 'ğŸ“˜ Navigimi nÃ« React Native me React Navigation',
    content: `PÃ«r tÃ« krijuar aplikacione me shumÃ« ekrane, mund tÃ« pÃ«rdorim bibliotekÃ«n \`react-navigation\`. Ky Ã«shtÃ« njÃ« mjet i fuqishÃ«m pÃ«r tÃ« menaxhuar navigimin ndÃ«rmjet ekraneve.

    Shembuj:
    \`\`\`javascript
    import React from 'react';
    import { Button } from 'react-native';
    import { NavigationContainer } from '@react-navigation/native';
    import { createStackNavigator } from '@react-navigation/stack';

    const Stack = createStackNavigator();

    function HomeScreen({ navigation }) {
      return (
        <Button
          title="Shko nÃ« ekranin tjetÃ«r"
          onPress={() => navigation.navigate('Details')}
        />
      );
    }

    function DetailsScreen() {
      return (
        <Text>Ky Ã«shtÃ« ekrani i detajeve!</Text>
      );
    }

    export default function App() {
      return (
        <NavigationContainer>
          <Stack.Navigator initialRouteName="Home">
            <Stack.Screen name="Home" component={HomeScreen} />
            <Stack.Screen name="Details" component={DetailsScreen} />
          </Stack.Navigator>
        </NavigationContainer>
      );
    }
    \`\`\`

    Ky shembull tregon si mund tÃ« pÃ«rdorim \`react-navigation\` pÃ«r tÃ« kaluar nga njÃ« ekran nÃ« tjetrin duke pÃ«rdorur butona dhe stack navigator.
    `,
  },
  {
    title: 'ğŸ“˜ PÃ«rdorimi i Imazheve nÃ« React Native',
    content: `PÃ«r tÃ« shfaqur imazhe nÃ« aplikacionet React Native, mund tÃ« pÃ«rdorni komponentin \`Image\`. Ky komponent mund tÃ« pÃ«rdoret pÃ«r tÃ« shfaqur imazhe tÃ« vendosura lokalisht ose nga URL.

    Shembuj:
    \`\`\`javascript
    import React from 'react';
    import { View, Image } from 'react-native';

    function App() {
      return (
        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
          <Image
            source={{ uri: 'https://example.com/image.jpg' }}
            style={{ width: 200, height: 200 }}
          />
        </View>
      );
    }

    export default App;
    \`\`\`

    Ky shembull tregon se si mund tÃ« ngarkoni njÃ« imazh nga njÃ« URL dhe ta shfaqni atÃ« nÃ« aplikacionin tuaj.
    `,
  },
];


const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    backgroundColor: '#f5f5f5',
    padding: 20,
    alignItems: 'center',
  },
  backButton: {
    justifyContent:'center',
    alignSelf: 'flex-start',
    marginBottom: 10,
    backgroundColor: '#3498db',
    paddingVertical: 8,
    paddingHorizontal: 15,
    borderRadius: 8,
  },
  backButtonText: {
    fontSize: 18,
    color: '#fff',
    fontWeight: 'bold',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2C3E50',
    marginBottom: 10,
    textAlign: 'center',
  },
  description: {
    fontSize: 14,
    textAlign: 'center',
    color: '#555',
    marginBottom: 10,
  },
  card: {
    backgroundColor: '#FFF',
    padding: 15,
    borderRadius: 10,
    width: '100%',
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowOffset: { width: 0, height: 4 },
    shadowRadius: 5,
    elevation: 3,
    marginBottom: 15,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 5,
  },
  tutorialText: {
    fontSize: 12,
    color: '#444',
    textAlign: 'left',
  },
  menuContainer: {
    paddingVertical: 10,
  },
  menuItem: {
    padding: 10,
    marginHorizontal: 5,
    borderRadius: 10,
    backgroundColor: '#3498db',
  },
  activeMenuItem: {
    backgroundColor: '#2980b9',
  },
  menuText: {
    fontSize: 14,
    color: '#fff',
  },
});
